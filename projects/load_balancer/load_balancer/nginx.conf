worker_processes 2;

events {
    worker_connections 256;
    multi_accept on;
    use epoll;
}

http {
    include mime.types;

    upstream backend {
        # ===== for sticky-session==========
        # ip_hash; # uncomment it for sticky-session
        # server load_balancer-backend_server-1:8000;
        # server load_balancer-backend_server-2:8000;
        # server load_balancer-backend_server-3:8000;
        # server load_balancer-backend_server-4:8000;

        # ===== for least connection =========
        least_conn;
        server load_balancer-backend_server-1:8000;
        server load_balancer-backend_server-2:8000;
        server load_balancer-backend_server-3:8000;
        server load_balancer-backend_server-4:8000;

        # ====== for round-robin ===========
        # server load_balancer-backend_server-1:8000;
        # server load_balancer-backend_server-2:8000;
        # server load_balancer-backend_server-3:8000;
        # server load_balancer-backend_server-4:8000;

        # ===== for weighted route ==========
        # you can update the weights according to how heavy load a server can take.
        
        # server load_balancer-backend_server-1:8000 weight=1;
        # server load_balancer-backend_server-2:8000 weight=1;
        # server load_balancer-backend_server-3:8000 weight=1;
        # server load_balancer-backend_server-4:8000 weight=1;
        
    }

    server {
        server_name localhost;
        listen 80;

        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        server_name localhost;
        # configures ssl layer

        listen 443 ssl;
        ssl_certificate /certificates/server.crt;
        ssl_certificate_key /certificates/server.key;

        location / {
            proxy_pass http://backend;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
