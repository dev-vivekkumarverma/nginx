# Main configuration block
user nginx;  # Sets the user under which Nginx runs (default: 'nginx' on Linux)
worker_processes auto;  # Number of worker processes (auto = CPU cores)

# Global error log file
error_log /var/log/nginx/error.log warn;  # Log level: debug, info, notice, warn, error, crit

# **EVENTS BLOCK** - Handles worker connections
events {
    worker_connections 1024;  # Max simultaneous connections per worker
    multi_accept on;  # Accept multiple new connections at once
    use epoll;  # Use the best event mechanism (epoll is best for Linux)
}

# **HTTP BLOCK** - Configures HTTP settings and virtual hosts
http {
    include /etc/nginx/mime.types;  # Defines supported file MIME types
    default_type application/octet-stream;  # Default MIME type for unknown files

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
                    
    access_log /var/log/nginx/access.log main;  # Access log format

    sendfile on;  # Enables efficient file transfer
    tcp_nopush on;  # Sends full HTTP response headers in one packet
    tcp_nodelay on;  # Reduces latency for small packets

    keepalive_timeout 65;  # Keep connections open for 65 seconds
    client_max_body_size 30M;  # Max request body size (important for file uploads)

    # **GZIP Compression**
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_comp_level 5;  # Compression level (1-9)

    # **CACHE CONTROL**
    open_file_cache max=1000 inactive=20s;  # Cache open file descriptors
    open_file_cache_valid 30s;  # Cache validity time
    open_file_cache_min_uses 2;  # Min usage before caching

    # **VIRTUAL HOST CONFIGURATION**
    server {
        listen 80;  # Port for HTTP traffic
        server_name example.com www.example.com;  # Domain names

        root /var/www/html;  # Document root directory
        index index.html index.htm index.php;  # Default files

        # **LOGGING**
        access_log /var/log/nginx/example_access.log main;
        error_log /var/log/nginx/example_error.log warn;

        # **SECURITY SETTINGS**
        server_tokens off;  # Hide Nginx version in error pages
        add_header X-Frame-Options DENY;  # Prevent Clickjacking
        add_header X-XSS-Protection "1; mode=block";  # Prevent XSS attacks

        # **LOCATION BLOCKS**
        location / {
            try_files $uri $uri/ /index.html;  # Serve files or fallback to index.html
        }

        location /api/ {
            proxy_pass http://localhost:8000/;  # Reverse proxy to backend
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # **Static Files**
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|otf|eot|mp4|pdf|txt)$ {
            expires max;  # Cache static files for a long time
            log_not_found off;  # Don't log missing static files
        }

        # **Redirect www to non-www**
        if ($host ~* ^www\.(.*)) {
            return 301 $scheme://$1$request_uri;
        }

        # **DENY ACCESS TO SENSITIVE FILES**
        location ~ /\.(ht|git|svn) {
            deny all;  # Block hidden files like .htaccess, .git, .svn
        }

        # **Custom Error Pages**
        error_page 404 /custom_404.html;
        location = /custom_404.html {
            root /var/www/errors/;
        }
    }

    # **SSL Configuration (HTTPS)**
    server {
        listen 443 ssl;
        server_name example.com;
        
        ssl_certificate /etc/nginx/ssl/example.crt;
        ssl_certificate_key /etc/nginx/ssl/example.key;
        
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        
        location / {
            root /var/www/html;
            index index.html;
        }
    }

    # **Redirect HTTP to HTTPS**
    server {
        listen 80;
        server_name example.com;
        return 301 https://$host$request_uri;
    }
}
